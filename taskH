#include <iostream>
#include <cmath>
struct node {
    long long value = 0;
    size_t level;
    size_t number;
    node* left = nullptr;
    node* right = nullptr;
    explicit node(const long long& val, const size_t& lv, const size_t& num) : value(val), level(lv), number(num) {}
};
class Tree {
    node* root;
    void clear(node* t) {
        if(!t) return;
        if(t -> level != 0) {
            clear(t -> left);
            clear(t -> right);
        }
        delete t;
    }
    void add(size_t index, const long long& d) {
        node* ptr = root;
        size_t pw = pow(2, root -> level);
        while(ptr -> level != 0) {
            ptr -> value += d;
            pw /= 2;
            if(index < (2 * ptr -> number + 1) * pw) {
                if(!ptr -> left) ptr -> left = new node(0, ptr -> level - 1, 2 * ptr -> number);
                ptr = ptr -> left;
            } else {
                if(!ptr -> right) ptr -> right = new node(0, ptr -> level - 1, 2 * ptr -> number + 1);
                ptr = ptr -> right;
            }
        }
        ptr -> value += d;
    }
public:
    explicit Tree(const size_t& n) {
        root = new node(0, n, 0);
    }
    ~Tree() {
        clear(root);
    }

    void insert(const long long& x) {
        add(x, x);
    }
    long long sum(size_t index) const {
        long long sum = 0;
        node* ptr = root;
        size_t pw = pow(2, root -> level);
        while(ptr -> level != 0) {
            pw /= 2;
            if(index < (2 * ptr -> number + 1) * pw) {
                if(!ptr -> left) return sum;
                ptr = ptr -> left;
            } else {
                if(ptr -> left) sum += ptr -> left -> value;
                if(!ptr -> right) return sum;
                ptr = ptr -> right;
            }
        }
        sum += ptr -> value;
        return sum;
    }
};
int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie();
    std::cout.tie();
    Tree tr(30);
    char c;
    long long x;
    size_t n;
    std::cin >> n;
    for(int i = 0; i < n; ++i) {
        std::cin >> c >> x;
        if(c == '+') tr.insert(x);
        if(c == '?') std::cout << tr.sum(x) << "\n";
    }
    return 0;
}
