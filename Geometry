#include <iostream>
#include <utility>
#include <vector>
#include <cmath>
#include <algorithm>

#ifndef GEOMETRY_GEOMETRY_H
#define GEOMETRY_GEOMETRY_H

const long double pi = 3.14159265358979323846;

bool eq(long double t1, long double t2) {
    return ((t1 - t2) > -0.00000001 && (t1 - t2) < 0.00000001);
}

struct Point {
    long double x;
    long double y;

    Point(const long double &x0 = 0, const long double &y0 = 0) : x(x0), y(y0) {}

    Point(const Point &A, const long double &dis, const long double &angle) : x(dis * cos(angle)), y(dis * sin(angle)) {
        *this += A;
    }

    Point &operator+=(const Point &t2) {
        x += t2.x;
        y += t2.y;
        return *this;
    }

    Point operator+(const Point &t2) const {
        Point t = *this;
        t += t2;
        return t;
    }

    Point &operator-=(const Point &t2) {
        x -= t2.x;
        y -= t2.y;
        return *this;
    }

    Point operator-(const Point &t2) const {
        Point t = *this;
        t -= t2;
        return t;
    }

    Point &operator*=(const long double &c) {
        x *= c;
        y *= c;
        return *this;
    }

    Point operator*(const long double &t2) const {
        Point t = *this;
        t *= t2;
        return t;
    }

    Point &operator/=(const long double &c) {
        x /= c;
        y /= c;
        return *this;
    }

    Point operator/(const long double &t2) const {
        Point t = *this;
        t /= t2;
        return t;
    }

    bool operator==(const Point &t2) const {
        return (eq(x, t2.x) && eq(y, t2.y));
    }

    bool operator!=(const Point &t2) const {
        return !(*this == t2);
    }

    long double dist0(const Point &B) const {
        return sqrt(pow(x - B.x, 2) + pow(y - B.y, 2));
    }

    long double angle(const Point &B) const {
        if (*this == B) return 0.0;
        long double x0 = B.x - x;
        long double y0 = B.y - y;
        long double dis = dist0(B);
        x0 /= dis;
        y0 /= dis;
        x0 = acos(x0);
        y0 = asin(y0);
        if (eq(x0, y0)) return x0;
        if (x0 > (pi / 2) && y0 >= 0) return x0;
        if (x0 > (pi / 2) && y0 < 0) return (2 * pi - x0);
        return (2 * pi + y0);
    }

    void rotate(const Point &center, long double angle) {
        *this -= center;
        long double cs = cos(angle);
        long double sn = sin(angle);
        long double new_x = x * cs - y * sn;
        y = x * sn + y * cs + center.y;
        x = new_x + center.x;
    }

    Point reflex(const Point &center) {
        scale(center, -1);
        return *this;
    }

    void scale(const Point &center, long double c) {
        *this = center + ((*this - center) * c);
    }
};


long double dist(const Point &A, const Point &B) {
    return A.dist0(B);
}

long double angle(const Point &A, const Point &X, const Point &Y) {
    long double a = A.angle(X);
    long double b = A.angle(Y);
    if (b < a) b += 2 * pi;
    return b - a;
}

class Line {
public:
    long double a;
    long double b;
    long double c;

    Line(const Point &A, const Point &B) {
        a = (B.y - A.y);
        b = -(B.x - A.x);
        c = A.y * B.x - A.x * B.y;
    }

    Line(long double k, long double b) : a(k), b(-1), c(b) {}

    Line(const Point &A, long double k) {
        a = k;
        b = -1;
        c = A.y - (A.x * k);
    }

    bool operator==(const Line &t2) const {
        if (eq(a, 0) && eq(t2.a, 0))
            return (eq(b, 0) && eq(t2.b, 0)) || (!eq(b, 0) && !eq(t2.b, 0) && eq((c / b), (t2.c / t2.b)));
        if (eq(b, 0) && eq(t2.b, 0))
            return (!eq(a, 0) && !eq(t2.a, 0) && eq((c / a), (t2.c / t2.a)));
        if (eq(a, 0) || eq(t2.a, 0)) return false;
        return (eq((b / a), (t2.b / t2.a)) && eq((c / a), (t2.c / t2.a)));
    }

    Line norm(const Point &A) const {
        Point B = A;
        if (eq(a, 0)) {
            B.y += 1;
        }
        return {A, B};
        return {A, b / a};

    }
    Point intersection(const Line &l) const {
        long double k_dif = (b * l.a) - (a * l.b);
        if (eq(k_dif, 0)) return {0, 0};
        long double y = ((l.c * a) - (c * l.a)) / k_dif;
        long double x = (!eq(a, 0) ? (-c - (b * y)) / a : (-l.c - (l.b * y)) / l.a);
        return {x, y};
    }
};

void reflex(Point &X, const Line &axis) {
    X.reflex(axis.intersection(axis.norm(X)));
}

class Shape {
public:
    virtual long double perimeter() const = 0;

    virtual long double area() const = 0;

    virtual bool operator==(const Shape &other) const = 0;

    virtual bool operator!=(const Shape &other) const = 0;

    virtual bool isCongruentTo(const Shape &a) const = 0;

    virtual bool isSimilarTo(const Shape &another) const = 0;

    virtual bool containsPoint(const Point &point) const = 0;

    virtual void reflex(Line axis) = 0;

    virtual void rotate(Point center, long double angle) = 0;

    virtual void reflex(Point center) = 0;

    virtual void scale(Point center, long double coefficient) = 0;

    virtual ~Shape() = default;
};

class Polygon : public virtual Shape {
    bool sim(const std::vector<Point> &vec1, const std::vector<Point> &vec2, long double k) const {
        for (size_t i = 0; i < vec1.size(); ++i) {
            long double alpha = angle({0, 0}, vec2[(i + 1) % vec1.size()] - vec2[i], vec1[1] - vec1[0]);
            size_t j = 0;
            for (; j < vec1.size(); ++j) {
                Point vector = vec2[(j + i) % vec1.size()] - vec2[i];
                vector.rotate({0, 0}, alpha);
                Point vector2 = (vec1[j] - vec1[0]) * k;
                if (vector2 != vector) {
                    j = vec1.size() + 1;
                }
            }
            if (j == vec1.size()) return true;
        }
        return false;
    }

protected:
    std::vector<Point> vert;
public:
    Polygon() = default;

    Polygon(std::vector<Point> new_vert) : vert(std::move(new_vert)) {}

    Polygon(std::initializer_list<Point> ls) : vert(ls) {}

    ~Polygon() override { vert.clear(); }

    size_t verticesCount() const {
        return vert.size();
    }

    const std::vector<Point> &getVertices() const {
        return vert;
    }

    bool isConvex() {
        if (angle(vert[0], vert[1], vert[vert.size() - 1]) < pi) {
            for (size_t i = 1; i < vert.size() - 1; ++i)
                if (angle(vert[i], vert[i + 1], vert[i - 1]) > pi) return false;
            if (angle(vert[vert.size() - 1], vert[0], vert[vert.size() - 2]) > pi) return false;
        } else {
            for (size_t i = 1; i < vert.size() - 1; ++i)
                if (angle(vert[i], vert[i + 1], vert[i - 1]) < pi) return false;
            if (angle(vert[vert.size() - 1], vert[0], vert[vert.size() - 2]) < pi) return false;
        }
        return true;
    }

    long double perimeter() const override {
        long double ans = dist(vert[0], vert[vert.size() - 1]);
        for (size_t i = 0; i < vert.size() - 1; ++i) {
            ans += dist(vert[i], vert[i + 1]);
        }
        return ans;
    }

    long double area() const override {
        size_t n = vert.size();
        long double S = 0;
        for (size_t i = 0; i < n; ++i) {
            S += (vert[(i + 1) % n].x - vert[i].x) * (vert[(i + 1) % n].y + vert[i].y) / 2;
        }
        return S;
    }

    bool operator==(const Shape &other1) const override {
        const Polygon *other_ptr = dynamic_cast<const Polygon *>(&other1);
        if (!other_ptr) return false;
        const Polygon &other = *other_ptr;

        if (vert.size() != other.vert.size()) return false;
        size_t i = 0;
        while (i < vert.size() && vert[0] != other.vert[i]) ++i;
        if (i == vert.size()) return false;
        if (vert[1] == other.vert[(1 + i) % vert.size()]) {
            for (size_t j = 0; j < vert.size(); ++j) {
                if (vert[j] != other.vert[(j + i) % vert.size()]) return false;
            }
        } else {
            for (size_t j = 0; j < vert.size(); ++j) {
                if (vert[(vert.size() - j) % vert.size()] != other.vert[(j + i) % vert.size()]) return false;
            }
        }
        return true;
    }

    bool operator!=(const Shape &other) const override {
        return !(*this == other);
    }

    bool isSimilarTo(const Shape &other) const override {
        const Polygon *other_ptr = dynamic_cast<const Polygon *>(&other);
        if (!other_ptr) return false;
        Polygon another = *other_ptr;
        long double k = another.perimeter() / perimeter();
        if (vert.size() != another.vert.size()) return false;

        if (sim(vert, another.vert, k)) return true;

        std::vector<Point> vert_rev = another.vert;
        std::reverse(vert_rev.begin(), vert_rev.end());
        if (sim(vert, vert_rev, k)) return true;

        another.reflex({{0, 0},
                        {0, 1}});
        if (sim(vert, another.vert, k)) return true;

        vert_rev = another.vert;
        std::reverse(vert_rev.begin(), vert_rev.end());
        if (sim(vert, vert_rev, k)) return true;
        return false;
    }

    bool isCongruentTo(const Shape &another0) const override {
        const Polygon *other_ptr = dynamic_cast<const Polygon *>(&another0);
        if (!other_ptr) return false;
        const Polygon &another = *other_ptr;
        return eq(another.perimeter() / perimeter(), 1) && isSimilarTo(another);
    }

    bool containsPoint(const Point &point) const override {
        Point point2 = point;
        point2 += {1, 1e8};
        Line l(point, point2);
        std::vector<long double> intersections;
        for (size_t i = 0; i < vert.size(); ++i) {
            if (eq(vert[i].x, point.x)) intersections.push_back(vert[i].y);
            if (!eq(vert[(i + 1) % vert.size()].x, point.x) &&
                ((vert[i].x - point.x) * (-vert[(i + 1) % vert.size()].x + point.x)) > 0) {
                intersections.push_back(l.intersection({vert[i], vert[(i + 1) % vert.size()]}).y);
            }
        }
        int n = 0;
        for (auto &in : intersections) {
            if (eq(in, point.y)) return true;
            if (in - point.y > 0.0000000001) ++n;
        }
        if (n % 2 == 0) return false;
        else return true;
    }

    void reflex(Line axis) override {
        for (auto &point : vert) {
            ::reflex(point, axis);
        }
    }

    void rotate(Point center, long double angle) override {
        for (auto &point : vert) {
            point.rotate(center, angle);
        }
    }

    void reflex(Point center) override {
        for (auto &point : vert) {
            point.reflex(center);
        }
    }

    void scale(Point center, long double coefficient) override {
        for (auto &point : vert) {
            point.scale(center, coefficient);
        }
    }
};

class Ellipse : public virtual Shape {
protected:
    long double R;
    Point focus1;
    Point focus2;
public:
    Ellipse() = default;

    Ellipse(const Point &A, const Point &B, long double r) : R(r), focus1(A), focus2(B) {}

    ~Ellipse() {}

    std::pair<Point, Point> focuses() {
        return {focus1, focus2};
    }

    long double c() const {
        return (dist(focus1, focus2)) / 2;
    }

    long double b() const {
        return sqrt(R * R / 4 - pow(c(), 2));
    }

    long double a() const {
        return R / 2;
    }

    long double eccentricity() const {
        return c() / a();
    }

    std::pair<Line, Line> directrices() {
        Point D1 = focus1 + (focus1 - focus2) * (a() * a() / c() / c() - 1) / 2;
        Point D2 = focus2 + (focus2 - focus1) * (a() * a() / c() / c() - 1) / 2;
        Line focus_line(focus1, focus2);
        return {focus_line.norm(D1), focus_line.norm(D2)};
    }

    Point center() {
        return ((focus1 + focus2) / 2);
    }

    long double perimeter() const override {
        long double a0 = a();
        long double b0 = b();
        return pi * (3 * (a0 + b0) - sqrt((3 * a0 + b0) * (a0 + 3 * b0)));
    }

    long double area() const override {
        return pi * a() * b();
    }

    bool operator==(const Shape &another_s) const override {
        const Ellipse *another_ptr = dynamic_cast<const Ellipse *>(&another_s);
        if (!another_ptr) return false;
        const Ellipse &another = *another_ptr;
        return eq(R, another.R) && ((focus1 == another.focus1 && focus2 == another.focus2) ||
                                    (focus1 == another.focus2 && focus2 == another.focus1));
    }

    bool operator!=(const Shape &another_s) const override {
        return !(*this == another_s);
    }

    bool isCongruentTo(const Shape &another0) const override {
        const Ellipse *other_ptr = dynamic_cast<const Ellipse *>(&another0);
        if (!other_ptr) return false;
        const Ellipse &another = *other_ptr;
        return eq(c(), another.c()) && eq(R, another.R);
    }

    bool isSimilarTo(const Shape &another0) const override {
        const Ellipse *other_ptr = dynamic_cast<const Ellipse *>(&another0);
        if (!other_ptr) return false;
        const Ellipse &another = *other_ptr;
        return eq(c() / another.c(), R / another.R);
    }

    bool containsPoint(const Point &point) const override {
        return (dist(point, focus1) + dist(point, focus2)) <= R;
    }

    void reflex(Line axis) override {
        ::reflex(focus1, axis);
        ::reflex(focus2, axis);
    }

    void rotate(Point center, long double angle) override {
        focus1.rotate(center, angle);
        focus2.rotate(center, angle);
    }

    void reflex(Point center) override {
        focus1.reflex(center);
        focus2.reflex(center);
    }

    void scale(Point center, long double coefficient) override {
        focus1.scale(center, coefficient);
        focus2.scale(center, coefficient);
        R *= coefficient;
    }
};

class Circle : public Ellipse {
public:
    Circle(const Point &center, long double r) {
        focus1 = center;
        focus2 = center;
        R = r;
    }

    long double radius() {
        return R;
    }
};

class Rectangle : public Polygon {
public:
    Rectangle() = default;

    Point center() {
        return (vert[0] + vert[1] + vert[2] + vert[3]) / 4;
    }

    std::pair<Line, Line> diagonals() {
        return {{vert[0], vert[2]},
                {vert[1], vert[3]}};
    }

    Rectangle(const Point &A, const Point &C, long double k) {
        if (k > 1.0) k = 1 / k;
        vert.push_back(A);
        double angle = atan(k);
        Point B = C;
        B.rotate(((A + C) / 2), 2 * angle);
        vert.push_back(B);
        vert.push_back(C);
        Point D = B.reflex(((A + C) / 2));
        vert.push_back(D);
    }
};

class Square : public Rectangle {
public:
    Square(const Point &A, const Point &C) : Rectangle(A, C, 1.0) {}

    Circle circumscribedCircle() const {
        return {(vert[0] + vert[2]) / 2, dist(vert[0], vert[2]) / 2};
    }

    Circle inscribedCircle() const {
        return {(vert[0] + vert[2]) / 2, dist(vert[0], vert[2]) / sqrt(8)};
    }
};

class Triangle : public Polygon {
public:
    Triangle(const Point &A, const Point &B, const Point &C) : Polygon({A, B, C}) {}

    Circle circumscribedCircle() const {
        Line AB(vert[0], vert[1]);
        Line Hc = AB.norm((vert[0] + vert[1]) / 2);
        Line BC(vert[1], vert[2]);
        Line Ha = BC.norm((vert[1] + vert[2]) / 2);
        Point center = (Ha.intersection(Hc));
        return {center, dist(center, vert[0])};
    }

    Circle inscribedCircle() const {
        long double AB = dist(vert[0], vert[1]);
        long double BC = dist(vert[1], vert[2]);
        long double CA = dist(vert[2], vert[0]);
        long double x = (BC + CA - AB) / 2;
        long double y = (-BC + CA + AB) / 2;
        long double z = (BC - CA + AB) / 2;
        Point X = vert[0] + (vert[1] - vert[0]) * (y / (y + z));
        Point Y = vert[1] + (vert[2] - vert[1]) * (z / (x + z));
        Point Z = vert[0] + (vert[2] - vert[0]) * (y / (y + x));
        Triangle XYZ(X, Y, Z);
        return XYZ.circumscribedCircle();
    }

    Point centroid() const {
        return (vert[0] + vert[1] + vert[2]) / 3;
    }

    Point orthocenter() const {
        Line AB(vert[0], vert[1]);
        Line Hc = AB.norm(vert[2]);
        Line BC(vert[1], vert[2]);
        Line Ha = BC.norm(vert[0]);
        return Ha.intersection(Hc);
    }

    Line EulerLine() const {
        return {centroid(), orthocenter()};
    }

    Circle ninePointsCircle() const {
        Triangle XYZ((vert[0] + vert[1]) / 2, (vert[1] + vert[2]) / 2, (vert[2] + vert[0]) / 2);
        return XYZ.circumscribedCircle();
    }
};

#endif //GEOMETRY_GEOMETRY_H
