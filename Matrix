
#include <vector>
#include <iostream>
#include <string>
#include <array>

class BigInteger {
    std::vector<long long> bigint;
    int sign = 1;
    const int bms = 1'000'000'000; //block max size

    long long to_next(const size_t &i) {
        long long tn = bigint[i] / bms;
        if (bigint[i] < 0 && (bigint[i] % bms != 0)) --tn;
        return tn;
    }

    void del_zero_blocks() {
        //assert(!case1);
        size_t i = bigint.size() - 1;
        while ((bigint[i] == 0) && (i != 0)) {
            bigint.pop_back();
            --i;
        }
    }

    void update_block(size_t i) {
        long long tn = to_next(i);
        if (tn == 0) return;
        if (i == bigint.size() - 1) bigint.push_back(tn);
        else bigint[i + 1] += tn;
        bigint[i] = bigint[i] - tn * bms;
    }

    void update_block(size_t i, int sn) {
        long long tn = to_next(i);
        if (tn == 0) return;
        if (i == bigint.size() - 1) bigint.push_back(sn * tn);
        else bigint[i + 1] += tn * sn;
        bigint[i] = bigint[i] - tn * bms;
    }

    bool static abs_less(const BigInteger &t1, const BigInteger &t2) {
        if (t1.bigint.size() < t2.bigint.size()) return true;
        if (t1.bigint.size() > t2.bigint.size()) return false;
        for (size_t i = t1.bigint.size() - 1;; --i) {
            if (t1.bigint[i] < t2.bigint[i]) return true;
            if (t1.bigint[i] > t2.bigint[i]) return false;
            if (i == 0) return false;
        }
    }


public:
    friend std::istream &operator>>(std::istream &in, BigInteger &bi);

    BigInteger abs() const {
        BigInteger copy = *this;
        copy.sign = 1;
        return copy;
    }

    BigInteger(const BigInteger &t) {
        sign = t.sign;
        bigint = t.bigint;
    }

    BigInteger(const int &n = 0) {
        bigint.push_back(n);
        if (n < 0) {
            sign = -1;
            bigint[0] *= -1;
        }
        update_block(0);
    }

    BigInteger(std::string str) {
        int i = 0;
        if (str[0] == '-') {
            i = 1;
            sign = -1;
        } else sign = 1;
        long long num;
        for (int j = (int) str.length() - 1; j >= i; j -= 9) {
            num = 0;
            if (j + 1 - i >= 9)
                for (int k = 8; k >= 0; --k) {
                    num *= 10;
                    num += str[j - k] - '0';
                }
            else
                for (; i <= j; ++i) {
                    num *= 10;
                    num += str[i] - '0';
                }
            bigint.push_back(num);
        }
        del_zero_blocks();
        if ((bigint.size() == 1) && (bigint[0] == 0)) sign = 1;
        //assert(!case1 && str == "87");
    }

    ~BigInteger() {
        bigint.clear();
    }

    BigInteger &operator=(const BigInteger &t) {
        sign = t.sign;
        bigint = t.bigint;
        return *this;
    }


    BigInteger &operator+=(const BigInteger &t2) {
        if (sign == -1) {
            sign = 1;
            *this -= t2;
            if (!((bigint.size() == 1) && (bigint[0] == 0))) sign *= -1;
            return *this;
        }
        {
            size_t m = std::max(bigint.size(), t2.bigint.size());
            int s = 1;
            if (t2.sign == -1 && abs_less(*this, t2)) s = -1;
            for (size_t i = 0; i < m; ++i) {
                if (bigint.size() == i) bigint.push_back(0);
                if (i < t2.bigint.size()) {
                    bigint[i] += t2.sign * t2.bigint[i];
                    bigint[i] *= s;
                } else if ((bigint[i] < bms) && (bigint[i] >= 0)) i = m;
                if (i != m)update_block(i, s);
            }
            sign *= s;
            if ((bigint.size() == 1) && (bigint[0] == 0)) sign = 1;
            del_zero_blocks();
        }
        return *this;
    }

    BigInteger &operator-=(const BigInteger &t2) {
        if (sign == -1) {
            sign = 1;
            *this += t2;
            if (!((bigint.size() == 1) && (bigint[0] == 0))) sign *= -1;
            return *this;
        }
        size_t m = std::max(bigint.size(), t2.bigint.size());
        int s = 1;
        if (t2.sign == 1 && abs_less(*this, t2)) s = -1;
        for (size_t i = 0; i < m; ++i) {
            if (bigint.size() == i) bigint.push_back(0);
            if (i < t2.bigint.size()) {
                bigint[i] -= t2.sign * t2.bigint[i];
                bigint[i] *= s;
                update_block(i, s);
            } else if ((bigint[i] < bms) && (bigint[i] >= 0)) i = m;
            if (i != m)update_block(i, s);
        }
        sign *= s;
        if ((bigint.size() == 1) && (bigint[0] == 0)) sign = 1;
        del_zero_blocks();
        return *this;
    }

    BigInteger &operator*=(const BigInteger &t) {
        if (((bigint.size() == 1) && (bigint[0] == 0)) || ((t.bigint.size() == 1) && (t.bigint[0] == 0))) {
            *this = 0;
            return *this;
        }
        std::vector<long long> old_bigint = bigint;
        bigint = std::vector<long long>(bigint.size() + t.bigint.size(), 0);
        for (size_t i = 0; i < t.bigint.size(); ++i) {
            for (size_t j = 0; j < old_bigint.size(); ++j) {
                bigint[i + j] += t.bigint[i] * old_bigint[j];
            }
        }
        for (size_t i = 0; i < bigint.size(); ++i) update_block(i);
        del_zero_blocks();
        sign = sign * t.sign;
        return *this;
    }

    BigInteger &operator*=(const int &t2) {
        if (t2 == 0 || ((bigint.size() == 1) && (bigint[0] == 0))) {
            *this = 0;
            return *this;
        }
        if (t2 == bms) {
            bigint.push_back(0);
            for (size_t i = bigint.size() - 1; i > 0; --i) bigint[i] = bigint[i - 1];
            bigint[0] = 0;
            return *this;
        }
        if (std::abs(t2) != 1) {
            bigint.push_back(0);
            for (size_t i = 0; i < bigint.size(); ++i) bigint[i] *= std::abs(t2);
            for (size_t i = 0; i < bigint.size(); ++i) update_block(i);
            del_zero_blocks();
        }
        if (t2 < 0) sign *= -1;
        return *this;
    }

    BigInteger &operator/=(const BigInteger &div) {
        if (div.bigint.size() == 1) return (*this /= (div.sign * div.bigint[0]));
        if ((bigint.size() == 1) && (bigint[0] == 0)) {
            sign = 1;
            return *this;
        }
        BigInteger answer(0);
        BigInteger num(0);
        for (auto i = bigint.rbegin(); i != bigint.rend(); ++i) {
            num *= bms;
            num += *i;
            int l = 0, r = bms;
            if (!abs_less(num, div)) {
                if (num.bigint.size() == div.bigint.size()) {
                    l = (num.bigint.back() / (div.bigint.back() + 1));
                    if (div.bigint.back() != 0) r = ((num.bigint.back() + 1) / (div.bigint.back())) + 1;
                } else {
                    l = ((num.bigint.back() * bms + num.bigint[num.bigint.size() - 2]) / (div.bigint.back() + 1));
                    if (div.bigint.back() != 0)
                        r = ((num.bigint.back() * bms + num.bigint[num.bigint.size() - 2] + 1) / (div.bigint.back())) +
                            1;
                }
                r = std::min(r, bms);
                while (r - l > 1) {
                    int mid = (r + l) / 2;
                    if (abs_less(num, div * mid)) r = mid;
                    else l = mid;
                }
            }
            answer *= bms;
            if (l > 0) {
                answer += l;
                num -= div.abs() * l;
            }
        }
        answer.sign = sign * div.sign;
        *this = answer;
        return *this;
    }

    BigInteger &operator/=(long long div) {
        if (div < 0) {
            sign *= -1;
            div *= -1;
        }
        if ((bigint.size() == 1) && (bigint[0] == 0)) {
            sign = 1;
            return *this;
        }
        for (size_t i = bigint.size() - 1; i > 0; --i) {
            bigint[i - 1] += (bigint[i] % div) * bms;
            bigint[i] /= div;
        }
        bigint[0] /= div;
        del_zero_blocks();
        return *this;
    }

    BigInteger &operator%=(const BigInteger &div) {
        BigInteger copy = *this;
        copy /= div;
        copy *= div;
        *this -= copy;
        return *this;
    }

    BigInteger operator*(const BigInteger &t2) const {
        BigInteger copy(0);
        copy = *this;
        copy *= t2;
        return copy;
    }

    BigInteger operator-() const {
        BigInteger copy = *this;
        if ((bigint.size() == 1) && (bigint[0] == 0)) return copy;
        copy.sign *= -1;
        return copy;
    }

    BigInteger &operator++() {
        *this += 1;
        return *this;
    }

    BigInteger operator++(int) {
        BigInteger copy = *this;
        ++(*this);
        return copy;
    }

    BigInteger &operator--() {
        *this -= 1;
        return *this;
    }

    BigInteger operator--(int) {
        BigInteger copy = *this;
        --(*this);
        return copy;
    }

    bool operator==(const BigInteger &t) const {
        if (sign != t.sign) return false;
        if (bigint.size() != t.bigint.size()) return false;
        for (size_t i = 0; i < bigint.size(); ++i) {
            if (bigint[i] != t.bigint[i]) return false;
        }
        return true;
    }

    bool operator<(const BigInteger &t) const {
        if (sign < t.sign) return true;
        if (sign > t.sign) return false;
        if (sign == 1) return abs_less(*this, t);
        if (sign == -1) return abs_less(t, *this);
        return false;
    }

    bool operator>(const BigInteger &t) const {
        return !((*this == t) || (*this < t));
    }

    bool operator<=(const BigInteger &t) const {
        return !(*this > t);
    }

    bool operator>=(const BigInteger &t) const {
        return !(*this < t);
    }

    bool operator!=(const BigInteger &t) const {
        return !(*this == t);
    }

    std::string toString() const {
        std::string str;
        str = "";
        std::string str2;
        if (sign == -1 && ((bigint.size() != 1) || (bigint[0] != 0))) str += '-';
        str += std::to_string(bigint[bigint.size() - 1]);
        for (int i = (int) bigint.size() - 2; i >= 0; --i) {
            str2 = std::to_string(bigint[i]);
            for (int j = 0; j < 9 - (int) str2.length(); ++j) str += '0';
            str += str2;
        }
        return str;
    }

    explicit operator bool() const {
        if ((*this) == 0) {
            return false;
        }
        return true;
    }

    BigInteger static nod(BigInteger t1, BigInteger t2) {
        if (t1 == 0) return t2.abs();
        if (t1.sign < 0) t1.sign *= -1;
        if (t2.sign < 0) t2.sign *= -1;
        BigInteger gtc = 1;
        while (t1 != t2) {
            if (t1 < t2) t2 -= t1;
            else t1 -= t2;
            while (t1.bigint[0] % 2 == 0 && t2.bigint[0] % 2 == 0) {
                gtc *= 2;
                t1 /= 2;
                t2 /= 2;
            }
            while (t1.bigint[0] % 2 == 0 && t1 != 0) t1 /= 2;
            while (t2.bigint[0] % 2 == 0) t2 /= 2;
        }
        return (gtc * t2);
    }
};

BigInteger operator+(const BigInteger &t1, const BigInteger &t2) {
    BigInteger copy = t1;
    copy += t2;
    return copy;
}

BigInteger operator-(const BigInteger &t1, const BigInteger &t2) {
    BigInteger copy = t1;
    copy -= t2;
    return copy;
}

BigInteger operator/(const BigInteger &t1, const BigInteger &t2) {
    BigInteger copy = t1;
    copy /= t2;
    return copy;
}

BigInteger operator%(const BigInteger &t1, const BigInteger &t2) {
    BigInteger copy = t1;
    copy %= t2;
    return copy;
}

BigInteger operator*(const int &t1, const BigInteger &t2) {
    BigInteger copy(t2);
    copy *= t1;
    return copy;
}

BigInteger operator*(const BigInteger &t1, const int &t2) {
    BigInteger copy(t1);
    copy *= t2;
    return copy;
}

std::ostream &operator<<(std::ostream &out, const BigInteger &bi) {
    out << bi.toString();
    return out;
}

std::istream &operator>>(std::istream &in, BigInteger &bi) {
    bi.bigint.clear();
    std::string str;
    in >> str;
    bi = BigInteger(str);
    return in;
}

BigInteger operator "" _bi(const unsigned long long t) {
    return BigInteger((int) t);
}

class Rational {
    BigInteger num;
    BigInteger den = 1;

    void abs_den() {
        if (den < 0) {
            num *= -1;
            den *= -1;
        }
    }

    void reduce() {
        BigInteger nod_num_den = BigInteger::nod(num, den);
        num /= nod_num_den;
        den /= nod_num_den;
        abs_den();
    }

public:
    friend std::istream &operator>>(std::istream &in, Rational &t);

    Rational(const BigInteger &bi) {
        num = bi;
    }

    Rational(int t = 0) {
        num = t;
        den = 1;
    }

    Rational &operator=(const Rational &t2) {
        num = t2.num;
        den = t2.den;
        return *this;
    }

    Rational &operator+=(const Rational &t) {
        BigInteger num2 = t.num * den;
        den *= t.den;
        num *= t.den;
        num += num2;
        reduce();
        return *this;
    }

    Rational &operator-=(const Rational &t) {
        BigInteger num2 = t.num * den;
        den *= t.den;
        num *= t.den;
        num -= num2;
        reduce();
        return *this;
    }

    Rational &operator*=(const Rational &t) {
        den *= t.den;
        num *= t.num;
        reduce();
        return *this;
    }

    Rational &operator/=(const Rational &t) {
        den *= t.num;
        num *= t.den;
        abs_den();
        reduce();
        return *this;
    }

    Rational operator-() {
        return Rational(num * (-1));
    }

    bool operator<(const Rational &t2) const {
        if (num < 0 && t2.num > 0) return true;
        if (num > 0 && t2.num < 0) return false;
        if (den == t2.den) return num < t2.num;
        return (num * t2.den) < (t2.num * den);
    }

    bool operator==(const Rational &t2) const {
        return (num == t2.num) && (den == t2.den);
    }

    bool operator>(const Rational &t2) const {
        return !(*this < t2 && *this == t2);
    }

    bool operator<=(const Rational &t2) const {
        return !(*this > t2);
    }

    bool operator>=(const Rational &t2) const {
        return !(*this < t2);
    }

    bool operator!=(const Rational &t2) const {
        return !(*this == t2);
    }

    std::string toString() const {
        std::string str = num.toString();
        if (den != 1) {
            str += '/';
            str += den.toString();
        }
        return str;
    }

    std::string asDecimal(size_t precision = 0) const {
        if (den == 1) return num.toString();
        std::string result;
        result = "";
        BigInteger dec = num / den;
        if (num < 0) {
            result += '-';
            dec = dec.abs();
        }
        result += dec.toString();
        dec = num.abs() % den;
        if ((precision != 0) && (dec != 0)) {
            result += '.';
            size_t i = 0;
            if (precision > 9) for (; i < precision - 9; i += 9) dec *= 1'000'000'000;
            for (; i < precision; ++i) dec *= 10;
            dec /= den;
            std::string str = dec.toString();
            for (i = 0; i < (precision - str.length()); ++i) result += '0';
            result += str;
            for (i = result.length() - 1; result[i] == '0'; --i) result.pop_back();
        }
        return result;
    }

    explicit operator double() const {
        std::string str = asDecimal(1000);
        double d = std::stod(str);
        return d;
    }
};

Rational operator+(const Rational &t1, const Rational &t2) {
    Rational result = t1;
    result += t2;
    return result;
}

Rational operator-(const Rational &t1, const Rational &t2) {
    Rational result = t1;
    result -= t2;
    return result;
}

Rational operator*(const Rational &t1, const Rational &t2) {
    Rational result = t1;
    result *= t2;
    return result;
}

Rational operator/(const Rational &t1, const Rational &t2) {
    Rational result = t1;
    result /= t2;
    return result;
}

std::istream &operator>>(std::istream &in, Rational &t) {
    std::string str_num;
    std::string str_den;
    std::string str;
    in >> str;
    auto c = str.begin();
    bool after_point = false;
    while (c != str.end()) {
        if (*c != '.') str_num.push_back(*c);
        else {
            after_point = true;
            str_den.push_back('1');
        }
        if (after_point) str_den.push_back('0');
        ++c;
    }
    if (!after_point) str_den = "1";
    t.num = BigInteger(str_num);
    t.den = BigInteger(str_den);
    t.reduce();
    return in;
}

std::ostream &operator<<(std::ostream &out, const Rational &t) {
    out << t.toString();
    return out;
}

template<long long N>
class Finite {
    long long number;
public:
    Finite(int n = 0) : number(n % N) {
        if (number < 0) number += N;
    }

    bool operator==(const Finite<N> t2) const {
        return number == t2.number;
    }

    bool operator!=(const Finite<N> t2) const {
        return number != t2.number;
    }

    Finite<N> &operator+=(const Finite<N> &t) {
        number += t.number;
        number %= N;
        return *this;
    }

    Finite<N> &operator-=(const Finite<N> &t) {
        number -= t.number;
        number %= N;
        if (number < 0) number += N;
        return *this;
    }

    Finite<N> &operator++() {
        *this += 1;
        return (*this);
    }

    Finite<N> &operator--() {
        *this -= 1;
        return (*this);
    }

    Finite<N> &operator*=(const Finite<N> &t) {
        number *= t.number;
        number %= N;
        return *this;
    }

    Finite<N> &operator/=(const Finite<N> &t) {
        for (int i = 0; i < N - 2; ++i) {
            *this *= t;
        }
        return *this;
    }

    long long value() const {
        return number;
    }
};

template<long long N>
std::ostream &operator<<(std::ostream &out, const Finite<N> &t) {
    out << t.value();
    return out;
}

template<long long N>
Finite<N> operator+(const Finite<N> &t1, const Finite<N> &t2) {
    Finite<N> t0 = t1;
    t0 += t2;
    return t0;
}

template<long long N>
Finite<N> operator-(const Finite<N> &t1, const Finite<N> &t2) {
    Finite<N> t0 = t1;
    t0 -= t2;
    return t0;
}

template<long long N>
Finite<N> operator*(const Finite<N> &t1, const Finite<N> &t2) {
    Finite<N> t0 = t1;
    t0 *= t2;
    return t0;
}

template<long long N>
Finite<N> operator/(const Finite<N> &t1, const Finite<N> &t2) {
    Finite<N> t0 = t1;
    t0 /= t2;
    return t0;
}

template<size_t M, size_t N, typename Field = Rational>
class Matrix {
    std::vector<std::vector<Field>> matrix;
public:
    Matrix();

    template<typename T>
    Matrix(const std::vector<std::vector<T>> &t) : Matrix() {
        for (size_t i = 0; i < M; ++i) for (size_t j = 0; j < N; ++j) matrix[i][j] = Field(t[i][j]);
    };

    template<typename T>
    Matrix(std::initializer_list<std::initializer_list<T>> t) {
        for (auto &y : t) {
            matrix.push_back(std::vector<Field>(M, Field(0)));
            for (auto &x : y) {
                matrix.back().push_back(Field(x));
            }
        }
    }

    bool operator==(const Matrix<M, N, Field> &t2) const {
        for (size_t i = 0; i < M; ++i) {
            for (size_t j = 0; j < N; ++j) {
                if (matrix[i][j] != t2.matrix[i][j]) return false;
            }
        }
        return true;
    }

    bool operator!=(const Matrix<M, N, Field> &t2) const {
        return !(*this == t2);
    }

    Matrix<M, N, Field> &operator+=(const Matrix<M, N, Field> &t2) {
        for (int i = 0; i < M; ++i) {
            for (int j = 0; j < N; ++j) {
                matrix[i][j] += t2.matrix[i][j];
            }
        }
        return *this;
    }

    Matrix<M, N, Field> &operator-=(const Matrix<M, N, Field> &t2) {
        for (size_t i = 0; i < M; ++i) {
            for (size_t j = 0; j < N; ++j) {
                matrix[i][j] -= t2.matrix[i][j];
            }
        }
        return *this;
    }

    Matrix<M, N, Field> &operator*=(const Field &c) {
        for (size_t i = 0; i < M; ++i) {
            for (size_t j = 0; j < N; ++j) {
                matrix[i][j] *= c;
            }
        }
        return (*this);
    }

    const std::vector<Field> &operator[](size_t i) const;

    std::vector<Field> &operator[](size_t i);

    std::pair<std::vector<std::vector<Field>>, Field> gauss() const {
        std::vector<std::vector<Field>> matrix_copy = matrix;
        Field det = Field(1);
        for (size_t x0 = 0, y0 = 0; y0 < M; ++y0) {
            size_t y = y0;
            while (y < M && matrix_copy[y][x0] == Field(0)) ++y;
            if (y == M) {
                y = y0;
                det = Field(0);
            } else {
                std::swap(matrix_copy[y], matrix_copy[y0]);
                if (y != y0) det *= Field(-1);
                for (size_t x = N - 1; x > x0; --x) matrix_copy[y0][x] /= matrix_copy[y0][x0];
                det *= matrix_copy[y0][x0];
                matrix_copy[y0][x0] = Field(1);
                for (size_t y = y0 + 1; y < M; ++y) {
                    Field d = matrix_copy[y][x0];
                    for (size_t x = x0; x < N; ++x) {
                        matrix_copy[y][x] -= (matrix_copy[y0][x] * d);
                    }
                }
            }
            ++x0;
        }
        return {matrix_copy, det};
    }

    Field det() const {
        static_assert(M == N, "");
        return gauss().second;
    }

    Matrix<N, M, Field> transposed() const {
        Matrix<N, M, Field> copy;
        for (size_t i = 0; i < N; ++i) {
            for (size_t j = 0; j < M; ++j) {
                copy[i][j] = matrix[j][i];
            }
        }
        return copy;
    }

    size_t rank() const {
        Matrix<M, N, Field> copy(gauss().first);
        size_t x = 0, y = 0;
        while (x < N && y < M) {
            if (copy[y][x] != 0) ++y;
            else ++x;
        }
        return y;
    }

    Field trace() const {
        static_assert(M == N, "");
        Field result = Field(0);
        for (size_t i = 0; i < M; ++i) result += matrix[i][i];
        return result;
    }

    Matrix<M, N, Field> &invert() {
        static_assert(M == N, "");
        Matrix<N, 2 * N, Field> copy;
        for (size_t y = 0; y < N; ++y) for (size_t x = 0; x < N; ++x) copy[y][x] = matrix[y][x];
        for (size_t y = 0; y < N; ++y)
            for (size_t x = 0; x < N; ++x) {
                if (x == y) copy[y][x + N] = Field(1);
                else copy[y][x + N] = Field(0);
            }
        copy = copy.gauss().first;
        for (size_t y0 = N - 1; y0 > 0; --y0) {
            for (int y = static_cast<int>(y0) - 1; y >= 0; --y) {
                for (size_t x = N; x < 2 * N; ++x) {
                    copy[y][x] -= (copy[y0][x] * copy[y][y0]);
                }
                copy[y][y0] = Field(0);
            }
        }
        for (size_t y = 0; y < N; ++y) for (size_t x = 0; x < N; ++x) matrix[y][x] = copy[y][x + N];
        return *this;
    }

    Matrix<N, M, Field> inverted() const {
        static_assert(M == N, "");
        Matrix<N, N, Field> copy = *this;
        copy.invert();
        return copy;
    }

    std::vector<Field> getRow(size_t y) const {
        return matrix[y];
    }

    std::vector<Field> getColumn(size_t x) const {
        std::vector<Field> answer;
        for (size_t y = 0; y < M; ++y) answer.push_back(matrix[y][x]);
        return answer;
    }
};

template<size_t M, size_t N, typename T>
Matrix<M, N, T> operator+(const Matrix<M, N, T> &t1, const Matrix<M, N, T> &t2) {
    Matrix<N, M, T> t0 = t1;
    t0 += t2;
    return t0;
}

template<size_t M, size_t N, typename T>
Matrix<M, N, T> operator-(const Matrix<M, N, T> &t1, const Matrix<M, N, T> &t2) {
    Matrix<M, N, T> t0 = t1;
    t0 -= t2;
    return t0;
}

template<size_t M, size_t N, typename T>
Matrix<M, N, T> operator*(const Matrix<M, N, T> &t1, const T &t2) {
    Matrix<M, N, T> copy = t1;
    copy *= t2;
    return copy;
}

template<size_t M, size_t N, typename T>
Matrix<M, N, T> operator*(const T &t1, const Matrix<M, N, T> &t2) {
    Matrix<M, N, T> copy = t2;
    copy *= t1;
    return copy;
}

template<size_t M, size_t N, size_t K, typename Field>
Matrix<M, K, Field> operator*(const Matrix<M, N, Field> &t1, const Matrix<N, K, Field> &t2) {
    Matrix<M, K, Field> result;
    for (size_t i = 0; i < M; ++i) {
        for (size_t j = 0; j < K; ++j) {
            result[i][j] = 0;
            for (size_t l = 0; l < N; ++l) {
                result[i][j] += t1[i][l] * t2[l][j];
            }
        }
    }
    return result;
}

template<size_t N, typename Field = Rational>
using SquareMatrix = Matrix<N, N, Field>;

template<size_t N, typename Field>
Matrix<N, N, Field> &operator*=(Matrix<N, N, Field> &t1, const Matrix<N, N, Field> &t2) {
    Matrix<N, N, Field> result;
    for (size_t i = 0; i < N; ++i) {
        for (size_t j = 0; j < N; ++j) {
            result[i][j] = 0;
            for (size_t l = 0; l < N; ++l) {
                result[i][j] += t1[i][l] * t2[l][j];
            }
        }
    }
    t1 = result;
    return t1;
}

template<size_t M, size_t N, typename Field>
Matrix<M, N, Field>::Matrix() : matrix(M, std::vector<Field>(N, Field(0))) {
    if (M == N) {
        for (size_t i = 0; i < M; ++i)
            matrix[i][i] = Field(1);
    }
}

template<size_t M, size_t N, typename Field>
const std::vector<Field> &Matrix<M, N, Field>::operator[](size_t i) const {
    return matrix[i];
}

template<size_t M, size_t N, typename Field>
std::vector<Field> &Matrix<M, N, Field>::operator[](size_t i) {
    return matrix[i];
}
