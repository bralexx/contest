#include <iostream>
#include <vector>
#include <complex>

#define PI 3.1415926535897932384626433832795028841971693993751058209749445923

void fft(std::vector<std::complex<double>>& poly_coef, bool inverse) {
    if (poly_coef.size() == 1)
        return;
    std::vector<std::complex<double>> poly_even(poly_coef.size() / 2), poly_odd(poly_coef.size() / 2);
    for (int i = 0; i < poly_even.size(); ++i) {
        poly_even[i] = poly_coef[2 * i];
        poly_odd[i] = poly_coef[2 * i + 1];
    }
    fft(poly_even, inverse);
    fft(poly_odd, inverse);
    std::complex<double> w(1), w1(cos(2 * PI / poly_coef.size()), sin(2 * PI / poly_coef.size()));
    if (inverse)
        w1.imag(-w1.imag());
    for (int i = 0; i < poly_even.size(); ++i) {
        poly_coef[i] = poly_even[i] + w * poly_odd[i];
        poly_coef[i + poly_even.size()] = poly_even[i] - w * poly_odd[i];
        w *= w1;
    }
    if (inverse) {
        for (auto& i:poly_coef)
            i /= 2.0;
    }
}

std::vector<std::complex<double>> poly_multiplication(std::vector<std::complex<double>> poly1,
                                                      std::vector<std::complex<double>> poly2) {
    int fft_degree = 1;
    while (std::max(poly1.size(), poly2.size()) > fft_degree)
        fft_degree <<= 1;
    fft_degree <<= 1;
    poly1.resize(fft_degree);
    poly2.resize(fft_degree);

    fft(poly1, false);
    fft(poly2, false);
    for (int coef = 0; coef < fft_degree; ++coef)
        poly1[coef] *= poly2[coef];
    fft(poly1, true);
    while (round(poly1.back().real()) == 0)
        poly1.pop_back();
    return poly1;
}

int main() {
    int degree1, degree2;
    std::cin >> degree1;
    std::vector<std::complex<double>> poly1(degree1 + 1);
    for (auto it = poly1.rbegin(); it != poly1.rend(); ++it)
        std::cin >> *it;
    std::cin >> degree2;
    std::vector<std::complex<double>> poly2(degree2 + 1);
    for (auto it = poly2.rbegin(); it != poly2.rend(); ++it)
        std::cin >> *it;
    auto answer = poly_multiplication(poly1, poly2);
    std::cout << answer.size() - 1 << ' ';
    for (auto it = answer.rbegin(); it != answer.rend(); ++it)
        std::cout << (int) round(it->real()) << ' ';
    return 0;
}
