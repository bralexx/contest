#include <iostream>
#include <vector>
#include <list>

template<size_t chunkSize>
class FixedAllocator {
    const size_t capacity = 10000;
    std::vector<char*>* oldData;
    char* data;
    std::vector<char*>* deleted;
public:
    FixedAllocator() {
        data = reinterpret_cast<char*>(operator new(capacity * chunkSize));
        deleted = new std::vector<char*>;
        oldData = new std::vector<char*>;
        deleted->push_back(data);
    }

    static FixedAllocator<chunkSize>*& getElement() {
        static FixedAllocator<chunkSize>* element;
        if (element == nullptr) element = new FixedAllocator<chunkSize>;
        return element;
    }

    void* allocate() {
        if (size_t(deleted->front() - data) == (capacity - 1) * chunkSize && deleted->size() == 1) {
            oldData->push_back(data);
            data = reinterpret_cast<char*>(operator new(capacity * chunkSize));
            (*deleted)[0] = data;
        }
        if (deleted->size() > 1) {
            auto ret = deleted->back();
            deleted->pop_back();
            return reinterpret_cast<void*>(ret);
        }
        auto ret = (*deleted)[0];
        (*deleted)[0] += chunkSize;
        return reinterpret_cast<void*>(ret);
    }

    void deallocate(void* ptr) {
        deleted->push_back(reinterpret_cast<char*>(ptr));
    }
};

template<typename T>
class FastAllocator {
    size_t border = 1000;
public:
    int x = 0;

    FastAllocator() = default;

    FastAllocator(int n) : x(n) {}

    template<typename T2>
    explicit FastAllocator(const FastAllocator<T2>&) {}

    ~FastAllocator() = default;

    using value_type = T;

    T* allocate(size_t n) {
        if (n == 1 && sizeof(T) <= border) {
            return reinterpret_cast<T*>(FixedAllocator<sizeof(T)>::getElement()->allocate());
        }
        return reinterpret_cast<T*>(new int[sizeof(T) * n]);
    }

    void deallocate(T* ptr, size_t n) {
        if (n == 1 && sizeof(T) <= border) {
            (FixedAllocator<sizeof(T)>::getElement())->deallocate(reinterpret_cast<void*>(ptr));
        } else {
            delete[] ptr;
        }
    }
};

template<typename T1, typename T2>
bool operator==(const FastAllocator<T1>& t1, const FastAllocator<T2>& t2) {
    return typeid(T1) == typeid(T2) && t1.x == t2.x;
}

template<typename T1, typename T2>
bool operator!=(const FastAllocator<T1>& t1, const FastAllocator<T2>& t2) {
    return !(t1 == t2);
}

template<typename T, typename Alloc = std::allocator<T>>
class List {
    struct Node {
        Node* prev;
        Node* next;
        T value;

        Node() : value() {
            prev = nullptr;
            next = nullptr;
        };

        explicit Node(const T& t) : value(t) {
            prev = nullptr;
            next = nullptr;
        };

        Node& operator=(const Node& other) {
            value = other.value;
            return *this;
        }
    };

    using NodeAlloc = typename std::allocator_traits<Alloc>::template rebind_alloc<Node>;

    using NodeAllocTrains = std::allocator_traits<NodeAlloc>;

    NodeAlloc alloc;

    Node* newNode() {
        Node* ptr = NodeAllocTrains::allocate(alloc, 1);
        NodeAllocTrains::construct(alloc, ptr);
        ++sz;
        return ptr;
    }

    Node* newNode(const T& t) {
        Node* ptr = NodeAllocTrains::allocate(alloc, 1);
        NodeAllocTrains::construct(alloc, ptr, t);
        ++sz;
        return ptr;
    }

    void deleteNode(Node* node) {
        NodeAllocTrains::destroy(alloc, node);
        NodeAllocTrains::deallocate(alloc, node, 1);
        --sz;
    }

    size_t sz = 0;
    Node* first = nullptr;
    Node* last = nullptr;
    Node* endNode = NodeAllocTrains::allocate(alloc, 1);
public:
    List() {
        first = endNode;
        last = endNode;
    };

    explicit List(const Alloc& alloc_) : alloc(alloc_) {
        endNode = NodeAllocTrains::allocate(alloc, 1);
    }

    explicit List(size_t count, const T& value, const Alloc& alloc_ = Alloc()) : alloc(alloc_) {
        for (size_t i = 0; i < count; ++i) push_back(value);
    }

    explicit List(size_t count, const Alloc& alloc_ = Alloc()) : alloc(alloc_) {
        if (count != 0) {
            endNode->prev = newNode();
            first = endNode->prev;
        }
        for (size_t i = 1; i < count; ++i) {
            endNode->prev->next = newNode();
            endNode->prev = endNode->prev->next;
        }
        Node* ptr = first;
        while (ptr->next != nullptr) {
            ptr->next->prev = ptr;
            ptr = ptr->next;
        }
        endNode->prev->next = endNode;
        last = endNode->prev;
    }

    NodeAlloc& get_allocator() {
        return alloc;
    }

    List(const List& other) {
        alloc = NodeAllocTrains::select_on_container_copy_construction(other.alloc);
        if (other.sz == 0) return;
        for (auto it = other.begin(); it != other.end(); ++it) push_back(*it);
    }

    ~List() {
        Node* ptr = first;
        Node* ptrNext;
        while (ptr != endNode) {
            ptrNext = ptr->next;
            NodeAllocTrains::destroy(alloc, ptr);
            NodeAllocTrains::deallocate(alloc, ptr, 1);
            ptr = ptrNext;
        }
        NodeAllocTrains::deallocate(alloc, endNode, 1);
    }

    void swap(Node*& t1, Node*& t2) {
        Node* ptr = t1;
        t1 = t2;
        t2 = ptr;
    }

    List& operator=(const List& other) {
        List copy(other);
        swap(first, copy.first);
        swap(last, copy.last);
        swap(endNode, copy.endNode);
        std::swap(sz, copy.sz);
        if (NodeAllocTrains::propagate_on_container_copy_assignment::value && alloc != other.alloc) {
            alloc = other.alloc;
        }
        return *this;
    }

    size_t size() const {
        return sz;
    }

    void push_back(const T& value) {
        if (sz == 0) {
            last = newNode(value);
            endNode->prev = last;
            first = last;
            last->next = endNode;
            return;
        }
        Node* ptr = newNode(value);
        last->next = ptr;
        last->next->prev = last;
        last = last->next;
        endNode->prev = last;
        last->next = endNode;
    }

    void push_front(const T& value) {
        if (sz == 0) {
            push_back(value);
            return;
        }
        Node* ptr = newNode(value);
        first->prev = ptr;
        first->prev->next = first;
        first = first->prev;
    }

    void pop_back() {
        if (sz == 0) return;
        if (sz == 1) {
            deleteNode(last);
            first = endNode;
            last = endNode;
            endNode->prev = nullptr;
            return;
        }
        last->prev->next = last;
        last = last->prev;
        deleteNode(last->next);
        last->next = endNode;
        endNode->prev = last;
    }

    void pop_front() {
        if (sz == 1) {
            pop_back();
            return;
        }
        first = first->next;
        deleteNode(first->prev);
        first->prev = nullptr;
    }

private:
    template<bool IsConst>
    class MyIterator {
    public:
        Node* node = nullptr;

        Node* getNode() const {
            return node;
        }

        using iterator_category = std::bidirectional_iterator_tag;
        using value_type = std::conditional_t<IsConst, const T, T>;
        using reference = value_type&;
        using pointer = value_type*;
        using difference_type = int;

        explicit MyIterator(Node* node_) : node(node_) {
        }

        MyIterator(const MyIterator<false>& other) : node(other.node) {
        }


        MyIterator<IsConst>& operator=(const MyIterator<IsConst>& other) {
            node = other.node;
            return *this;
        }

        MyIterator<IsConst>& operator++() {
            node = node->next;
            return *this;
        }

        MyIterator<IsConst>& operator--() {
            node = node->prev;
            return *this;
        }

        MyIterator<IsConst> operator++(int) {
            MyIterator<IsConst> copy = *this;
            node = node->next;
            return copy;
        }

        MyIterator<IsConst> operator--(int) {
            MyIterator<IsConst> copy = *this;
            node = node->prev;
            return copy;
        }

        std::conditional_t<IsConst, const T&, T&> operator*() {
            return node->value;
        }

        std::conditional_t<IsConst, const T*, T*> operator->() {
            return &(node->value);
        }

        template<bool IsConst2>
        bool operator==(const MyIterator<IsConst2>& other) {
            return node == other.getNode();
        }

        template<bool IsConst2>
        bool operator!=(const MyIterator<IsConst2>& other) {
            return !operator==(other);
        }
    };

public:
    using iterator = MyIterator<false>;
    using const_iterator = MyIterator<true>;

    using reverse_iterator = std::reverse_iterator<MyIterator<false>>;
    using const_reverse_iterator = std::reverse_iterator<MyIterator<true>>;

    iterator begin() {
        return iterator(first);
    }

    const_iterator begin() const {
        return const_iterator(first);
    }

    const_iterator cbegin() const {
        const_iterator it(first);
        return it;
    }

    iterator end() {
        return iterator(endNode);
    }

    const_iterator end() const {
        return const_iterator(endNode);
    }

    const_iterator cend() const {
        return const_iterator(endNode);
    }

    reverse_iterator rbegin() {
        return reverse_iterator(iterator(endNode));
    }

    const_reverse_iterator rbegin() const {
        return const_reverse_iterator(iterator(endNode));
    }

    const_reverse_iterator crbegin() const {
        return const_reverse_iterator(iterator(endNode));
    }

    reverse_iterator rend() {
        return reverse_iterator(iterator(first));
    }

    const_reverse_iterator rend() const {
        return const_reverse_iterator(iterator(first));
    }

    const_reverse_iterator crend() const {
        return const_reverse_iterator(iterator(first));
    }

    void insert(const_iterator it, const T& value) {
        Node* ptr = newNode(value);
        Node* itNode = it.getNode();
        if (it != begin()) {
            ptr->prev = itNode->prev;
            ptr->prev->next = ptr;
        } else {
            first = ptr;
            last = ptr;
        }
        ptr->next = itNode;
        ptr->next->prev = ptr;
    }

    void erase(const_iterator it) {
        if (it == end()) return;
        Node* itNode = it.getNode();
        if (sz == 1) {
            pop_back();
            return;
        } else if (it == begin()) {
            first = itNode->next;
            first->prev = nullptr;
        } else if (it == end()) {
            last = itNode->prev;
            last->next = nullptr;
        } else {
            itNode->prev->next = itNode->next;
            itNode->next->prev = itNode->prev;
        }
        deleteNode(itNode);
    }
};
