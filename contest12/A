#include <iostream>
#include <string>
#include <vector>

struct sufMassElement {
    int strIndex;
    long long classNum;
};
void countSort(std::vector<sufMassElement>& vec, int maxClassNum) {
    std::vector<int> counter(maxClassNum, 0);
    for (auto& i:vec) 
        ++counter[i.classNum];
    for (int i = 1; i < counter.size(); ++i) 
        counter[i] += counter[i - 1];
    std::vector<sufMassElement> newVec(vec.size());
    for (int i = vec.size() - 1; i >= 0; --i)
        newVec[--counter[vec[i].classNum]] = vec[i];
    vec = newVec;
}

std::vector<int> getSufMass(std::string s) {
    s.push_back('a' - 1);
    std::vector<sufMassElement> sufMass;
    std::vector<int> sufPos(s.length());
    for (int i = 0; i < s.length(); ++i) 
        sufMass.push_back({i, s[i] - 'a' + 1});
    countSort(sufMass, 27);
    for (int i = 0; i < s.length(); ++i) 
        sufPos[sufMass[i].strIndex] = i;
    int classNum = 27;

    for (int l = 1; l < s.length(); l *= 2) {
        std::vector<int> secondClasses(s.length()), oldClasses(s.length());
        for (int i = 0; i < s.length(); ++i) 
            oldClasses[i] = sufMass[i].classNum;
        for (auto& i:sufMass) {
            i.strIndex += s.length() - l;
            i.strIndex %= s.length();
            secondClasses[i.strIndex] = i.classNum;
            i.classNum = oldClasses[sufPos[i.strIndex]];
        }
        countSort(sufMass, classNum);
        classNum = 1;
        sufMass[0].classNum = 0;
        for (int i = 0; i < s.length(); ++i) 
            oldClasses[i] = sufMass[i].classNum;
        for (int i = 0; i < s.length(); ++i)
            if (oldClasses[i] == oldClasses[i - 1] &&
                secondClasses[sufMass[i].strIndex] == secondClasses[sufMass[i - 1].strIndex])
                sufMass[i].classNum = sufMass[i - 1].classNum;
            else
                sufMass[i].classNum = classNum++;
        for (int i = 0; i < s.length(); ++i) 
            sufPos[sufMass[i].strIndex] = i;
    }
    std::vector<int> realSufMass;
    for (auto& i:sufMass) 
        if (i.strIndex != s.length() - 1) 
            realSufMass.push_back(i.strIndex);
    return realSufMass;
}

int main() {
    std::string s;
    std::cin >> s;
    auto sufMass = getSufMass(s);
    for (auto& i:sufMass) std::cout << i + 1 << ' ';
    return 0;
}
