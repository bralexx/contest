#include <iostream>
#include <vector>

template<typename T, typename Alloc = std::allocator<T>>
class List {
    struct Node {
        Node* prev;
        Node* next;
        T value;

        Node() : value() {
            prev = nullptr;
            next = nullptr;
        };

        explicit Node(const T& t) : value(t) {
            prev = nullptr;
            next = nullptr;
        };

        template<typename Type>
        Node(Type&& t) : value(std::forward<Type>(t)) {
            prev = nullptr;
            next = nullptr;
        };

        Node& operator=(const Node& other) {
            value = other.value;
            return *this;
        }
    };

    using NodeAlloc = typename std::allocator_traits<Alloc>::template rebind_alloc<Node>;

    using NodeAllocTrains = std::allocator_traits<NodeAlloc>;

    NodeAlloc alloc;

    Node* newNode() {
        Node* ptr = NodeAllocTrains::allocate(alloc, 1);
        NodeAllocTrains::construct(alloc, ptr);
        ++sz;
        return ptr;
    }

    Node* newNode(const T& t) {
        Node* ptr = NodeAllocTrains::allocate(alloc, 1);
        NodeAllocTrains::construct(alloc, ptr, t);
        ++sz;
        return ptr;
    }

    template<typename Type>
    Node* newNode(Type&& t) {
        Node* ptr = NodeAllocTrains::allocate(alloc, 1);
        NodeAllocTrains::construct(alloc, ptr, std::forward<Type>(t));
        ++sz;
        return ptr;
    }

    void deleteNode(Node* node) {
        NodeAllocTrains::destroy(alloc, node);
        NodeAllocTrains::deallocate(alloc, node, 1);
        --sz;
    }

    size_t sz = 0;
    Node* first = nullptr;
    Node* last = nullptr;
    Node* endNode = NodeAllocTrains::allocate(alloc, 1);
public:
    List() {
        first = endNode;
        last = endNode;
    };

    explicit List(const Alloc& alloc_) : alloc(alloc_) {
        endNode = NodeAllocTrains::allocate(alloc, 1);
    }

    explicit List(size_t count, const T& value, const Alloc& alloc_ = Alloc()) : alloc(alloc_) {
        for (size_t i = 0; i < count; ++i) push_back(value);
    }

    explicit List(size_t count, const Alloc& alloc_ = Alloc()) : alloc(alloc_) {
        if (count != 0) {
            endNode->prev = newNode();
            first = endNode->prev;
        }
        for (size_t i = 1; i < count; ++i) {
            endNode->prev->next = newNode();
            endNode->prev = endNode->prev->next;
        }
        Node* ptr = first;
        while (ptr->next != nullptr) {
            ptr->next->prev = ptr;
            ptr = ptr->next;
        }
        endNode->prev->next = endNode;
        last = endNode->prev;
    }

    NodeAlloc& get_allocator() {
        return alloc;
    }

    void swap(Node*& t1, Node*& t2) {
        Node* ptr = t1;
        t1 = t2;
        t2 = ptr;
    }

    List(const List& other) {
        alloc = NodeAllocTrains::select_on_container_copy_construction(other.alloc);
        if (other.sz == 0) return;
        for (auto it = other.begin(); it != other.end(); ++it) push_back(*it);
    }

    List(List&& other) noexcept: List() {
        std::swap(alloc, other.alloc);
        swap(first, other.first);
        swap(last, other.last);
        swap(endNode, other.endNode);
        sz = 0;
        std::swap(sz, other.sz);
    }

    ~List() {
        Node* ptr = first;
        Node* ptrNext;
        while (ptr != endNode) {
            ptrNext = ptr->next;
            NodeAllocTrains::destroy(alloc, ptr);
            NodeAllocTrains::deallocate(alloc, ptr, 1);
            ptr = ptrNext;
        }
        NodeAllocTrains::deallocate(alloc, endNode, 1);
    }


    List& operator=(const List& other) {
        List copy(other);
        swap(first, copy.first);
        swap(last, copy.last);
        swap(endNode, copy.endNode);
        std::swap(sz, copy.sz);
        if (NodeAllocTrains::propagate_on_container_copy_assignment::value && alloc != other.alloc) {
            alloc = other.alloc;
        }
        return *this;
    }


    List& operator=(List&& other) noexcept {
        swap(first, other.first);
        swap(last, other.last);
        swap(endNode, other.endNode);
        std::swap(sz, other.sz);
        return *this;
    }

    size_t size() const {
        return sz;
    }

    void push_back(const T& value) {
        push_back(T(value));
    }

    void push_back(T&& value) {
        if (sz == 0) {
            last = newNode(std::move(value));
            endNode->prev = last;
            first = last;
            last->next = endNode;
            return;
        }
        Node* ptr = newNode(std::move(value));
        last->next = ptr;
        last->next->prev = last;
        last = last->next;
        endNode->prev = last;
        last->next = endNode;
    }

    void push_front(const T& value) {
        push_front(T(value));
    }

    void push_front(T&& value) {
        if (sz == 0) {
            push_back(std::move(value));
            return;
        }
        Node* ptr = newNode(std::move(value));
        first->prev = ptr;
        first->prev->next = first;
        first = first->prev;
    }

    void pop_back() {
        if (sz == 0) return;
        if (sz == 1) {
            deleteNode(last);
            first = endNode;
            last = endNode;
            endNode->prev = nullptr;
            return;
        }
        if (last == nullptr)
            if (last->prev == nullptr)
                last->prev->next = last;
        last = last->prev;
        deleteNode(last->next);
        last->next = endNode;
        endNode->prev = last;
    }

    void pop_front() {
        if (sz == 1) {
            pop_back();
            return;
        }
        first = first->next;
        deleteNode(first->prev);
        first->prev = nullptr;
    }

private:
    template<bool IsConst>
    class MyIterator {
    public:
        Node* node = nullptr;

        Node* getNode() const {
            return node;
        }

        using iterator_category = std::bidirectional_iterator_tag;
        using value_type = std::conditional_t<IsConst, const T, T>;
        using reference = value_type&;
        using pointer = value_type*;
        using difference_type = int;

        explicit MyIterator(Node* node_) : node(node_) {
        }

        explicit MyIterator(const MyIterator<false>& other) : node(other.node) {
        }
        
        MyIterator<IsConst>& operator=(const MyIterator<IsConst>& other) {
            node = other.node;
            return *this;
        }

        MyIterator<IsConst>& operator++() {
            node = node->next;
            return *this;
        }

        MyIterator<IsConst>& operator--() {
            node = node->prev;
            return *this;
        }

        MyIterator<IsConst> operator++(int) {
            MyIterator<IsConst> copy = *this;
            node = node->next;
            return copy;
        }

        MyIterator<IsConst> operator--(int) {
            MyIterator<IsConst> copy = *this;
            node = node->prev;
            return copy;
        }

        std::conditional_t<IsConst, const T&, T&> operator*() {
            return node->value;
        }

        std::conditional_t<IsConst, const T*, T*> operator->() {
            return &(node->value);
        }

        template<bool IsConst2>
        bool operator==(const MyIterator<IsConst2>& other) {
            return node == other.getNode();
        }

        template<bool IsConst2>
        bool operator!=(const MyIterator<IsConst2>& other) {
            return !operator==(other);
        }
    };

public:
    using iterator = MyIterator<false>;
    using const_iterator = MyIterator<true>;

    using reverse_iterator = std::reverse_iterator<MyIterator<false>>;
    using const_reverse_iterator = std::reverse_iterator<MyIterator<true>>;

    iterator begin() {
        return iterator(first);
    }

    const_iterator begin() const {
        return const_iterator(first);
    }

    const_iterator cbegin() const {
        const_iterator it(first);
        return it;
    }

    iterator end() {
        return iterator(endNode);
    }

    const_iterator end() const {
        return const_iterator(endNode);
    }

    const_iterator cend() const {
        return const_iterator(endNode);
    }

    reverse_iterator rbegin() {
        return reverse_iterator(iterator(endNode));
    }

    const_reverse_iterator rbegin() const {
        return const_reverse_iterator(iterator(endNode));
    }

    const_reverse_iterator crbegin() const {
        return const_reverse_iterator(iterator(endNode));
    }

    reverse_iterator rend() {
        return reverse_iterator(iterator(first));
    }

    const_reverse_iterator rend() const {
        return const_reverse_iterator(iterator(first));
    }

    const_reverse_iterator crend() const {
        return const_reverse_iterator(iterator(first));
    }

    void insert(const_iterator it, const T& value) {
        insert(it, T(value));
    }

    void insert(const_iterator it, T&& value) {
        Node* ptr = newNode(std::move(value));
        Node* itNode = it.getNode();
        if (sz == 0) {
            push_back(std::move(value));
            return;
        }
        if (it == begin()) first = ptr;
        else {
            ptr->prev = itNode->prev;
            ptr->prev->next = ptr;
        }
        ptr->next = itNode;
        itNode->prev = ptr;
        if (it == end()) last = ptr;
    }

    void erase(const_iterator it) {
        if (it == end()) return;
        Node* itNode = it.getNode();
        if (sz == 1) {
            pop_back();
            return;
        } else if (it == begin()) {
            first = itNode->next;
            first->prev = nullptr;
        } else if (it == end()) {
            last = itNode->prev;
            last->next = nullptr;
        } else {
            itNode->prev->next = itNode->next;
            itNode->next->prev = itNode->prev;
        }
        deleteNode(itNode);
    }
};


template<typename Key,
        typename Value,
        typename Hash = std::hash<Key>,
        typename Equal = std::equal_to<Key>,
        typename Alloc = std::allocator<std::pair<const Key, Value>>>
class UnorderedMap {
public:
    using NodeType = std::pair<const Key, Value>;
    using NotConstNodeType = std::pair<Key, Value>;
    using NotConstAlloc = typename std::allocator_traits<Alloc>::template rebind_alloc<NotConstNodeType>;
    using Iterator = typename List<NotConstNodeType, NotConstAlloc>::iterator;
    using ConstIterator = typename List<NotConstNodeType, NotConstAlloc>::const_iterator;

    Iterator begin() {
        return list.begin();
    }

    ConstIterator cbegin() const {
        return list.cbegin();
    }

    Iterator end() {
        return list.end();
    }

    ConstIterator cend() {
        return list.cend();
    }

private:
    NotConstAlloc alloc;
    float maxLoadFactor = 0.5;
    List<NotConstNodeType, NotConstAlloc> list;
    std::vector<Iterator> hashes;
public:
    UnorderedMap() {
        hashes.resize(13, list.end());
    }

    UnorderedMap(const UnorderedMap& other) : list(other.list) {
        maxLoadFactor = other.maxLoadFactor;
        alloc = other.alloc;
        hashes.resize(other.hashes.size(), list.end());
        for (auto it = list.begin(); it != list.end(); ++it)
            if (hashes[Hash()(it->first) % hashes.size()] == end()) hashes[Hash()(it->first) % hashes.size()] = it;
    };

    UnorderedMap(UnorderedMap&& other) noexcept {
        maxLoadFactor = other.maxLoadFactor;
        other.maxLoadFactor = 0.5;
        list = std::move(other.list);
        hashes = std::move(other.hashes);
    }

    UnorderedMap& operator=(const UnorderedMap<Key, Value, Hash, Equal, Alloc>& other) {
        maxLoadFactor = other.maxLoadFactor;
        list = other.list;
        hashes = other.hashes;
        return *this;
    }

    UnorderedMap& operator=(UnorderedMap&& other) noexcept {
        maxLoadFactor = other.maxLoadFactor;
        other.maxLoadFactor = 0.5;
        list = std::move(other.list);
        hashes = std::move(other.hashes);
        return *this;
    }

    ~UnorderedMap() = default;

    void rehash(size_t newSize) {
        List<NotConstNodeType, NotConstAlloc> newList;
        hashes = std::vector<Iterator>(newSize, newList.end());
        for (auto it = list.begin(); it != list.end(); ++it) {
            auto hash = Hash()(it->first) % newSize;
            newList.insert(hashes[hash], std::move(*it));
            --hashes[hash];
        }
        list = std::move(newList);
    }

    Iterator find(const Key& key) {
        auto hash = Hash()(key) % hashes.size();
        for (auto it = hashes[hash]; it != list.end(); ++it) {
            if (Equal()((*it).first, key)) return it;
            if (Hash()((*it).first) != hash) return end();
        }
        return end();
    }

    std::pair<Iterator, bool> insert(NotConstNodeType&& node) {
        while (list.size() > hashes.size() * maxLoadFactor) rehash(2 * hashes.size());
        auto f = find(node.first);
        if (f != end()) return {f, false};
        auto hash = Hash()(node.first) % hashes.size();
        list.insert(hashes[hash], std::move(node));
        --hashes[hash];
        return {hashes[hash], true};
    }

    std::pair<Iterator, bool> insert(const NotConstNodeType& node) {
        return insert(NodeType(node));
    }

    template<typename It>
    void insert(It first, It last) {
        while (first != last) {
            insert(*first);
            ++first;
        }
    }

    Value& operator[](const Key& key) {
        return insert(NodeType(key, Value())).first->second;
    }

    Value& at(const Key& key) {
        auto it = find(key);
        if (it == end()) throw std::out_of_range("");
        return it->second;
    }

    const Value& at(const Key& key) const {
        auto it = find(key);
        if (it == end()) throw std::out_of_range("");
        return it->second;
    }

    template<typename... Args>
    std::pair<Iterator, bool> emplace(Args... args) {
        NotConstNodeType* ptr = std::allocator_traits<NotConstAlloc>::allocate(alloc, 1);
        std::allocator_traits<NotConstAlloc>::construct(alloc, ptr, std::forward<Args>(args)...);
        return insert(std::move(*ptr));
    }

    void erase(Iterator it) {
        auto next = it;
        ++next;
        auto hash = Hash()(it->first) % hashes.size();
        if (hashes[hash] == it) {
            if (next == end() || hash != Hash()(next->first) % hashes.size()) hashes[hash] = end();
            else hashes[hash] = next;
        }
        list.erase(it);
    }

    void erase(Iterator first, Iterator last) {
        while (first != last) {
            erase(first++);
        }
    }

    size_t size() {
        return list.size();
    }

    void reserve(size_t sz) {
        if (sz > hashes.size() * maxLoadFactor) rehash(sz);
    }

    float load_factor() const {
        return (1.0f * list.size()) / hashes.size();
    }

    float max_load_factor() const {
        return maxLoadFactor;
    }

    void max_load_factor(float z) {
        maxLoadFactor = z;
    }

    size_t max_size() const {
        return 1e9;
    }
};
