#include <iostream>
#include <vector>

using std::cout;
using std::string;
using std::cin;
template<class T>
struct Stack {
    T* N = new T[1];
    int size = 0;
    int arraysize = 1;

    Stack() {}
    Stack(const Stack&) = delete;
    bool operator= (const Stack&) = delete;
    ~Stack() {}

    int getsize()const {
        return size;
    }

    void push(const T& x) {
        if(arraysize == size){
            T* NN = new T[arraysize * 2];
            for(int i = 0; i < size; ++i) {
                NN[i] = N[i];
            }
            delete[] N;
            N = NN;
            arraysize *= 2;
        }
        N[size] = x;
        ++size;
    }


    T pop() {
        T lastN = N[size-1];
        if(arraysize/4 > size) {
            T* NN = new T[arraysize/2];
            for(int i = 0; i < size; ++i){
                NN[i] = N[i];
            }
            delete[] N;
            N = NN;
            arraysize /= 2;
        }
        --size;
        return lastN;
    }


    T back()const {
        return N[size-1];
    }


    void clear() {
        delete[] N;
        N = new T[1];
        arraysize = 1;
        size = 0;
    }


    bool empty()const {
        return size == 0;
    }
};


int main() {
    Stack<int> st;
    string in;
    do {
        cin >> in;

        if(in == "push") {
            int x;
            cin >> x;
            st.push(x);
            cout << "ok\n";
        }

        if( in == "pop" ) {
            if(!st.empty()) {
                cout << st.pop() << "\n";
            }else{
                cout << "error\n";
            }
        }

        if( in == "back" ){
            if(!st.empty()) {
                cout << st.back() << "\n";
            }else{
                cout << "error\n";
            }
        }

        if( in == "size" ) {
            cout << st.getsize() << "\n";
        }

        if(in == "clear") {
            st.clear();
            cout << "ok\n";
        }
    }while(in != "exit");
    cout << "bye";
}
