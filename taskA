#include <iostream>

using std::cout;
using std::string;
using std::cin;

template<class T>
struct ElementOfStack {
    T value;
    ElementOfStack* prev;
};

template<class T>
struct Stack {
    ElementOfStack<T> top;
    int size = 0;

    Stack(){}
    Stack(const Stack&) = delete;
    bool operator= (const Stack&) = delete;
    ~Stack(){}

    int getsize()const {
        return size;
    }

    void push(T& x) {
        ElementOfStack<T>* other = new ElementOfStack<T>;
        *other = top;
        top = {x, other};
        ++size;
    }

    T pop() {
        T lastVal = top.value;
        ElementOfStack<T>* prev = top.prev;
        top = *top.prev;
        delete prev;
        --size;
        return lastVal;
    }

    int back()const {
        return top.value;
    }

    void clear() {
        while (0 < size) pop();
    }

    bool empty() {
        return size == 0;
    }
};


int main() {
    Stack<int> st;
    string in;
    do {
        cin >> in;

        if(in == "push") {
            int x;
            cin >> x;
            st.push(x);
            cout << "ok\n";
        }

        if( in == "pop" ) {
            if(!st.empty()) {
                cout << st.pop() << "\n";
            }else{
                cout << "error\n";
            }
        }

        if( in == "back" ){
            if(!st.empty()) {
                cout << st.back() << "\n";
            }else{
                cout << "error\n";
            }
        }

        if( in == "size" ) {
            cout << st.getsize() << "\n";
        }

        if(in == "clear") {
            st.clear();
            cout << "ok\n";
        }
    }while(in != "exit");
    cout << "bye";
}
